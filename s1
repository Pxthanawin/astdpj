local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local Lighting = game:GetService("Lighting")
local CollectionService = game:GetService("CollectionService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")

local LocalPlayer = Players.LocalPlayer or Players.PlayerAdded:Wait()
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
--PlayerGui:Destroy()

local VirtualUser = game:service("VirtualUser")
LocalPlayer.Idled:connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)

local TOTAL_PREMIUM
local filePremium = "nnm-premium-"..LocalPlayer.Name..".txt"

local mainGui = Instance.new("ScreenGui")
mainGui.Name = "CustomOverlayGui"
mainGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
mainGui.ResetOnSpawn = false
mainGui.IgnoreGuiInset = true
mainGui.Parent = CoreGui

local backgroundFrame = Instance.new("Frame")
backgroundFrame.Name = "Background"
backgroundFrame.Size = UDim2.new(1, 0, 1, 0)
backgroundFrame.BackgroundColor3 = Color3.new(0, 0, 0)
backgroundFrame.BackgroundTransparency = 0
backgroundFrame.BorderSizePixel = 0
backgroundFrame.Parent = mainGui

local centerContainer = Instance.new("Frame")
centerContainer.Name = "CenterContainer"
centerContainer.AnchorPoint = Vector2.new(0.5, 0.5)
centerContainer.Position = UDim2.new(0.5, 0, 0.5, 0)
centerContainer.Size = UDim2.new(0.4, 0, 0.2, 0)
centerContainer.BackgroundTransparency = 1
centerContainer.Parent = backgroundFrame

local aspectRatio = Instance.new("UIAspectRatioConstraint")
aspectRatio.AspectRatio = 2
aspectRatio.DominantAxis = Enum.DominantAxis.Width
aspectRatio.Parent = centerContainer

local itemRowLayout = Instance.new("UIListLayout")
itemRowLayout.FillDirection = Enum.FillDirection.Horizontal
itemRowLayout.VerticalAlignment = Enum.VerticalAlignment.Center
itemRowLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
itemRowLayout.SortOrder = Enum.SortOrder.LayoutOrder
itemRowLayout.Padding = UDim.new(0.05, 0)
itemRowLayout.Parent = centerContainer

local itemImage = Instance.new("ImageLabel")
itemImage.Name = "ItemImage"
itemImage.Size = UDim2.new(0.4, 0, 0.8, 0)
itemImage.BackgroundTransparency = 1
itemImage.Image = "rbxassetid://14511803600"
itemImage.ScaleType = Enum.ScaleType.Fit
itemImage.LayoutOrder = 1
itemImage.Parent = centerContainer

local nameLabel = Instance.new("TextLabel")
nameLabel.Name = "PlayerName"
nameLabel.Size = UDim2.new(0, 300, 0, 40)
nameLabel.AnchorPoint = Vector2.new(1, 1)
nameLabel.Position = UDim2.new(1, -20, 1, -20)
nameLabel.BackgroundTransparency = 1
nameLabel.TextColor3 = Color3.new(1, 1, 1)
nameLabel.Font = Enum.Font.GothamBold
nameLabel.TextScaled = true
nameLabel.TextXAlignment = Enum.TextXAlignment.Right
nameLabel.Text = "Username: " .. LocalPlayer.Name
nameLabel.Parent = backgroundFrame

local itemCountLabel = Instance.new("TextLabel")
itemCountLabel.Name = "ItemCount"
itemCountLabel.Size = UDim2.new(0.5, 0, 1, 0)
itemCountLabel.BackgroundTransparency = 1
itemCountLabel.TextColor3 = Color3.new(1, 1, 1)
itemCountLabel.Font = Enum.Font.GothamBold
itemCountLabel.TextScaled = true
itemCountLabel.TextXAlignment = Enum.TextXAlignment.Left
itemCountLabel.Text = (TOTAL_PREMIUM and tostring(TOTAL_PREMIUM)) or "Loading Data"
itemCountLabel.LayoutOrder = 2
itemCountLabel.Parent = centerContainer

task.spawn(function()
    while task.wait(1) do
        itemCountLabel.Text = (TOTAL_PREMIUM and tostring(TOTAL_PREMIUM)) or "Loading Data"
    end
end)

local function OptimizeGamePerformance_Nuclear()
    print("WARNING: EXECUTING NUCLEAR PERFORMANCE OPTIMIZATION...")

    local Workspace = game:GetService("Workspace")
    local Lighting = game:GetService("Lighting")
    local RunService = game:GetService("RunService")
    local StarterGui = game:GetService("StarterGui")
    local Debris = game:GetService("Debris")

    local thisScript = script

    pcall(function()
        settings().Rendering.GraphicsMode = Enum.GraphicsMode.NoGraphics
        settings().Rendering.QualityLevel = Enum.QualityLevel.Level01
        StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.All, false)
    end)

    Lighting:ClearAllChildren()
    Lighting.Technology = Enum.Technology.Compatibility
    Lighting.GlobalShadows = false
    Lighting.Brightness = 0
    Lighting.OutdoorAmbient = Color3.new(0, 0, 0)
    Lighting.EnvironmentSpecularScale = 0
    Lighting.EnvironmentDiffuseScale = 0

    local function optimizeOrDestroyObject(obj)
        pcall(function()
            if obj:IsA("BasePart") then
                obj.Anchored = true
                obj.Transparency = 1
                obj.CanCollide = false
                obj.CastShadow = false

            elseif (obj:IsA("Script") or obj:IsA("LocalScript")) and obj ~= thisScript then
                obj.Disabled = true

            elseif obj:IsA("Humanoid") then
                local animator = obj:FindFirstChildOfClass("Animator")
                if animator then
                    animator:Destroy()
                end
                obj.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None

            elseif obj:IsA("Decal") or obj:IsA("Texture") or obj:IsA("SurfaceGui")
                or obj:IsA("BillboardGui") or obj:IsA("ParticleEmitter") or obj:IsA("Trail")
                or obj:IsA("Beam") or obj:IsA("Fire") or obj:IsA("Smoke") or obj:IsA("Sparkles")
                or obj:IsA("Sound") or obj:IsA("Light") or obj:IsA("PostEffect")
                or obj:IsA("Atmosphere") or obj:IsA("Sky") or obj:IsA("Clothing")
                or obj:IsA("Accessory") or obj:IsA("BodyColors") then
                obj:Destroy()
            end
        end)
    end

    local function executePurge()
        print("Executing workspace purge...")
        for _, descendant in ipairs(Workspace:GetDescendants()) do
            if descendant.Parent then
                optimizeOrDestroyObject(descendant)
            end
        end
    end

    executePurge()
end
task.spawn(function()
    while task.wait(2) do
        game:GetService("RunService"):Set3dRenderingEnabled(true)
        task.wait()
        game:GetService("RunService"):Set3dRenderingEnabled(false)
    end
end)
OptimizeGamePerformance_Nuclear()

--

local QuestMod = require(ReplicatedStorage:WaitForChild("Mods"):WaitForChild("QuestMod"))
local claimQuest = function()
    local allQuestsData = QuestMod.Get()
    if not allQuestsData then return end
    local totalRewards = {}
    for questType, questGroup in pairs(allQuestsData) do
        if questGroup and questGroup.Quests then
            for _, questInfo in pairs(questGroup.Quests) do
                if questInfo.Progress >= questInfo.Goal and not questInfo.Completed then
                    local claimResult = QuestMod.Claim(questType, questInfo.Key)
                    if claimResult and claimResult.Rewards then
                        for _, rewardData in pairs(claimResult.Rewards) do
                            table.insert(totalRewards, rewardData)
                        end
                    end
                end
            end
        end
    end
    if totalRewards and #totalRewards > 0 then
        local summarizedRewards = {}
        for _, reward in pairs(totalRewards) do
            local key = reward.DisplayName or reward.Name or reward.CashType or "Unknown"
            local amount = reward.Awarded or reward.Amount or 1

            if summarizedRewards[key] then
                summarizedRewards[key] = summarizedRewards[key] + amount
            else
                summarizedRewards[key] = amount
            end
        end
        --[[
        for name, amount in pairs(summarizedRewards) do
            print(string.format("  - %s: %s", name, amount))
        end]]
        if TOTAL_PREMIUM and summarizedRewards["Premium"] then
            TOTAL_PREMIUM += summarizedRewards["Premium"]
        end
    end
end

local DailyRewardMod = require(ReplicatedStorage:WaitForChild("Mods"):WaitForChild("DailyMod"))
local claimDaily = function()
    local rewardStatus = DailyRewardMod.Get()
    if not rewardStatus then return end
    if not rewardStatus.Claimed then
        local dayToClaim = rewardStatus.Streak + 1
        if rewardStatus.Rewards and rewardStatus.Rewards[dayToClaim] then
            local rewardInfo = rewardStatus.Rewards[dayToClaim][1]
            if rewardInfo then
                local rewardName = rewardInfo.DisplayName or rewardInfo.Name or rewardInfo.CashType or "Unknown Reward"
                local rewardAmount = rewardInfo.Amount or 1
                if TOTAL_PREMIUM and rewardName == 'Premium' then
                    TOTAL_PREMIUM += rewardAmount
                end
            end
        end
        DailyRewardMod.Claim()
    end
end

if workspace:GetAttribute("Gameplay") then

    local ResultModule = require(ReplicatedStorage.Main:WaitForChild("Result"))
    local originalSetUp = ResultModule.SetUp

    if isfile(filePremium) then
        TOTAL_PREMIUM = tonumber(readfile(filePremium))
    else
        TOTAL_PREMIUM = 0
    end

    ResultModule.SetUp = function(...)
        local args = {...}
        local resultInfo = args[2]

        if resultInfo and resultInfo.Result and resultInfo.Result.Rewards then
            for _, reward in pairs(resultInfo.Result.Rewards) do
                if reward.CashType == "Premium" then
                    TOTAL_PREMIUM += reward.Awarded
                end
            end
        end

        return originalSetUp(...)
    end

    ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("GetFunction"):InvokeServer({
        Type = "Settings",
        Mode = "Set",
        List = {
            PvPRequest = true,
            Auto = true,
            SkipSell = true,
            EnemyName = true,
            Enemy = true,
            EnemyHints = true,
            Element = true,
            SpeedUpAllow = true,
            Low = true,
            Walk = true,
            VFX = true,
            DMG = "None",
            Cutscene = "Never",
            BGM = 0,
            MatchBGM = 0,
            SFX = 0,
            UI = 0
        }
    })
    local SetEvent = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("SetEvent")
    local SetUnit = function(name, cf)
        if name == 'Uryu' then
            if LocalPlayer.Money.Value < 400 then
                return
            end
        elseif name == 'Goku' then
            if LocalPlayer.Money.Value < 450 then
                return
            end
        end
        SetEvent:FireServer("GameStuff", {
            "Summon",
            name,
            cf
        })
    end
    local UpgradeUnit = function(instant)
        ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("GetFunction"):InvokeServer({Type = "GameStuff"}, {"Upgrade", instant})
    end
    local Replay = function()
        ReplicatedStorage.Remotes.GetFunction:InvokeServer({
            Type = "Game",
            Index = "Replay",
            Mode = "Reward"
        })
    end
    local SetPlan = {
        {'Uryu', CFrame.new(-137.64407348632812, 9.381332397460938, -71.56160736083984, 1, 0, 0, 0, 1, 0, 0, 0, 1)},
        {'Uryu', CFrame.new(-141.10516357421875, 9.254250526428223, -71.19571685791016, 1, 0, 0, 0, 1, 0, 0, 0, 1)},
        {'Uryu', CFrame.new(-138.7045440673828, 9.72667121887207, -67.0546875, 1, 0, 0, 0, 1, 0, 0, 0, 1)},
        {'Uryu', CFrame.new(-141.6146697998047, 9.664419174194336, -68.02051544189453, 1, 0, 0, 0, 1, 0, 0, 0, 1)},
        {'Goku', CFrame.new(-90.51226043701172, 3.7593679428100586, -70.42835998535156, 1, 0, 0, 0, 1, 0, 0, 0, 1)},
        {'Goku', CFrame.new(-93.89806365966797, 3.7593679428100586, -70.753173828125, 1, 0, 0, 0, 1, 0, 0, 0, 1)},
        {'Goku', CFrame.new(-90.93028259277344, 3.7593679428100586, -67.10556030273438, 1, 0, 0, 0, 1, 0, 0, 0, 1)},
        {'Goku', CFrame.new(-94.32494354248047, 3.7593679428100586, -67.04347229003906, 1, 0, 0, 0, 1, 0, 0, 0, 1)}
    }

    local currentPlan = SetPlan
    task.spawn(function()
        while task.wait(0.5) do
            pcall(function()
                local tower = CollectionService:GetTagged("TowerLocalTag")[1]
                local currentUnit = #(workspace.EnemyFolder:GetChildren())
                local UnitFolder = workspace.UnitFolder:GetChildren()
                if not Lighting:GetAttribute("CurrentWaves") or ((Lighting:GetAttribute("StartVote") ~= Lighting:GetAttribute("StartVoteTotal")) and (Lighting:GetAttribute("CurrentWaves") == 0)) then
                    -- start
                    currentPlan = SetPlan
                    if ReplicatedStorage.GameSpeed.Value == 1 then
                        ReplicatedStorage.Remotes.GetFunction:InvokeServer({
                            Index = 2,
                            Type = "Speed"
                        })
                    end
                    ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("GameStuff"):FireServer("StartVoteYes")
                elseif (Lighting:GetAttribute("CurrentWaves") == Lighting:GetAttribute("TotalWaves")) and (currentUnit == 0) then
                    -- result
                    claimQuest()
                    task.wait(2)
                    Replay()
                elseif (tower:GetAttribute("LocalHeart") == 0) and (tower:GetAttribute("LocalHP") == 0) then
                    -- game-over
                    task.wait(2)
                    Replay()
                else
                    -- in-game
                    if #UnitFolder >= #SetPlan then
                        for _, v in ipairs(UnitFolder) do
                            if v:GetAttribute("UpgradeLevel") >= v:GetAttribute("UnitStars") + 1 then
                                continue
                            end
                            UpgradeUnit(v)
                            break
                        end
                    else
                        SetUnit(unpack(SetPlan[#UnitFolder+1]))
                    end
                end
            end)
        end
    end)
else
    claimQuest()
    claimDaily()
    task.wait(0.5)
    writefile(filePremium, tostring(require(ReplicatedStorage.Mods:WaitForChild("Cash")).Get("Premium")))
    task.wait(1)
    local GetFunction = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("GetFunction")
    GetFunction:InvokeServer({
        Type = "Lobby",
        Object = workspace:WaitForChild("Map"):WaitForChild("Buildings"):WaitForChild("Pods"):WaitForChild("StoryPod"):WaitForChild("Interact"),
        Mode = "Pod"
    })
    GetFunction:InvokeServer({
        Chapter = 1, Type = "Lobby",
		Name = "World1",
		Difficulty = "Hard",
		Mode = "Pod",
		Friend = false,
		Update = true
	})
    GetFunction:InvokeServer({
        Start = true,
        Type = "Lobby",
        Update = true,
        Mode = "Pod"
    })
end
